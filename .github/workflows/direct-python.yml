name: Direct Python

on: [push]

jobs:
  direct:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies directly
      run: |
        pip install Flask authlib pymongo python-dotenv flask-mail requests
        pip install mongomock factory-boy
    
    - name: Run test directly with Python
      run: |
        export SECRET_KEY=test_key
        export FLASK_ENV=testing
        export TESTING=true
        export GOOGLE_CLIENT_ID=placeholder_client_id
        export GOOGLE_CLIENT_SECRET=placeholder_client_secret
        python test_absolute_minimal.py
    
    - name: Test app import directly
      run: |
        export SECRET_KEY=test_key
        export FLASK_ENV=testing
        export TESTING=true
        export GOOGLE_CLIENT_ID=placeholder_client_id
        export GOOGLE_CLIENT_SECRET=placeholder_client_secret
        python -c "
import sys
import os
print('=== ENVIRONMENT ===')
print('SECRET_KEY:', os.getenv('SECRET_KEY'))
print('FLASK_ENV:', os.getenv('FLASK_ENV'))
print('TESTING:', os.getenv('TESTING'))

print('\\n=== IMPORTING APP ===')
import app
print('SUCCESS: App imported successfully!')

print('\\n=== TESTING BASIC FUNCTIONALITY ===')
app.app.config['TESTING'] = True
client = app.app.test_client()
print('Test client created successfully!')
"
    
    - name: Run a basic CI test manually
      run: |
        export SECRET_KEY=test_key
        export FLASK_ENV=testing
        export TESTING=true
        export CI=true
        export GOOGLE_CLIENT_ID=placeholder_client_id
        export GOOGLE_CLIENT_SECRET=placeholder_client_secret
        python -c "
import sys
import os

# Add project to path
sys.path.insert(0, '.')

# Test basic functionality from test_ci_basic.py
print('Testing Python version...')
assert sys.version_info >= (3, 8)
print('âœ… Python version OK')

print('Testing project structure...')
project_files = ['app.py', 'auth.py', 'database.py', 'models.py', 'requirements.txt']
for file in project_files:
    assert os.path.exists(file), f'Required file {file} not found'
print('âœ… Project structure OK')

print('Testing app import...')
import app
print('âœ… App import OK')

print('Testing auth import...')
import auth
print('âœ… Auth import OK')

print('Testing database import...')
import database
print('âœ… Database import OK')

print('Testing models import...')
import models
print('âœ… Models import OK')

print('\\nðŸŽ‰ ALL TESTS PASSED!')
"